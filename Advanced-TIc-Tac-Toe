
//  Tic-Tac-Toe Part2
//  Created by Jun ShangGuan.
// For this assignment, I finish all requirements and two extra bonus challenges. At first running the code, you cann't load saved game cause there's no previous game record. After you first save game, you can load it at next time.


#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <time.h>
using namespace std;

int player;//number of players
int boardsize;//size of board
int rowsize;// need row to win
char **board;// The board array
int row, col;// The user input row and col number


void game_setup();// before the player start play game, set the basic rules, like how many players, size of board and how many cells in rows to win, besides, check if value is logical and ask if save game
void board_array();//based on the board size number input, creat a empty dynamic array
void drawboard();//draw the board
int symbol(int);// based on different player, display the different symbol
void input_number(int);//ask player input the row and col number and check if it is already used
bool check(int);//check if there is winner
bool tie_game(int);//check if the game is tie
bool searchline(const int, const int, const int, const int, int);//check if there is a line in a row
bool square_check(int);//check if there is square winner
int square_searchline(const int, const int, const int, const int, int, int, int &);//check if there is square are the same symbols
void saywinner(int);// output winner message
void tieGame();//output tie game message
ofstream outputfile("replay.txt");// create the replay file to record every steps
void replay_game();// output previous game every steps


int main() {
    int chose;
    cout << "Welcome to the Tic-Tac-Toe game!" << endl;
    do{
        cout << "Input 0 to resume saved game, 1 to start new game!" << endl;
        cin >> chose;
        if (chose != 0 && chose != 1) {
            cout << "Error: Input again!" << endl;
        }
    } while (chose != 0 && chose != 1);
    
    if (chose == 1) {
        game_setup();
    }
    else{
        ifstream infile("saved game.txt");
        if (infile.fail()) {
            cout << "open saved game file failed!" << endl;
            cout << "Start a new game!" << endl;
            game_setup();
        }
        infile >> player >> boardsize >> rowsize;
        cout << "The saved game is " << player << " players, the board size is " << boardsize << " and the win sequence cout should be " << rowsize << "." << endl;
        board_array();
        drawboard();
        infile.close();
    };
    do{
        for (int i = 1; i<player + 1; i++) {
            input_number(i);
            outputfile<<row<<endl;
            outputfile<<col<<endl;
            outputfile<<i<<endl;
            board[row - 1][col - 1] = char(symbol(i));
            drawboard();
            if (check(i)) {
                int r;
                saywinner(i);
                do{
                    cout << "Input 1 to replay the game, 0 to exit!" << endl;
                    cin >> r;
                    if (r != 0 && r!= 1) {
                        cout << "Error: Input again!" << endl;
                    }
                } while (r != 0 && r != 1);
                if (r==0) {
                    return 0;
                }
                else{
                    replay_game();
                    return 0;
                }
            }
            else if (tie_game(i)){
                tieGame();
                int p;
                do{
                    cout << "Input 1 to replay the game, 0 to exit!" << endl;
                    cin >> p;
                    if (p != 0 && p!= 1) {
                        cout << "Error: Input again!" << endl;
                    }
                } while (p != 0 && p != 1);
                if (p==0) {
                    return 0;
                }
                else{
                    replay_game();
                    return 0;
                }
            }
            else if (square_check(i)){
                int q;
                saywinner(i);
                do{
                    cout << "Input 1 to replay the game, 0 to exit!" << endl;
                    cin >> q;
                    if (q != 0 && q!= 1) {
                        cout << "Error: Input again!" << endl;
                    }
                } while (q != 0 && q != 1);
                if (q==0) {
                    return 0;
                }
                else{
                    replay_game();
                    return 0;
                }
            }
        }
    } while (1);
}

void game_setup(){
    do{
        cout << "How many players are playing?(n>0)" << endl;
        cin >> player;
        if (player<0 || player>26) {
            cout << "Error: Number of players n > 0" << endl;
        }
    } while (player<0 || player>26);
    do{
        cout << "What size for the board?(x>0)" << endl;
        cin >> boardsize;
        if (boardsize<0) {
            cout << "Error: size of board x > 0" << endl;
        }
    } while (boardsize<0);
    board_array();
    drawboard();
    do{
        cout << "What size is row to win?(m > 0)" << endl;
        cin >> rowsize;
        cout<<rowsize<<" same symbols in a row or same symbols in a "<<rowsize -1<<" side dimmension square win the game!"<<endl;
        if (rowsize>boardsize || rowsize<0) {
            cout << "Error: Input again!" << endl;
        }
    } while (rowsize>boardsize || rowsize<0);
    int chose;
    do{
        cout << "If you want save and exit, press 0. press 1 to continue." << endl;
        cin >> chose;
        if (chose != 0 && chose != 1) {
            cout << "Error: Input again!" << endl;
        }
    } while (chose != 0 && chose != 1);
    if (chose == 0) {
        ofstream outfile("saved game.txt");
        outfile << player<<endl;
        outfile<<boardsize<<endl;
        outfile<<rowsize<<endl;
        outfile.close();
        exit(0);
    }
}

void board_array(){
    board = new char *[boardsize];
    for (int i = 0; i<boardsize; i++) {
        board[i] = new char[boardsize];
    }
    for (int i = 0; i<boardsize; i++) {
        for (int j = 0; j<boardsize; j++) {
            board[i][j] = '_';
        }
    }
}

void drawboard(){
    cout << " ";
    for (int i = 1; i <= boardsize; i++) {
        cout << i << " ";
    }
    cout << endl;
    for (int i = 0; i<boardsize; i++) {
        cout << i + 1;
        for (int j = 0; j<boardsize; j++) {
            cout << board[i][j] << "|";
        }
        cout << endl;
    }
}

int symbol(int x){
    switch (x) {
        case 1:return 'X'; break;
        case 2:return 'O'; break;
        case 3:return 'A'; break;
        case 4:return 'B'; break;
        case 5:return 'C'; break;
        case 6:return 'D'; break;
        case 7:return 'E'; break;
        case 8:return 'F'; break;
        case 9:return 'G'; break;
        case 10:return 'H'; break;
        case 11:return 'I'; break;
        case 12:return 'J'; break;
        case 13:return 'K'; break;
        case 14:return 'L'; break;
        case 15:return 'M'; break;
        case 16:return 'N'; break;
        case 17:return 'P'; break;
        case 18:return 'Q'; break;
        case 19:return 'R'; break;
        case 20:return 'S'; break;
        case 21:return 'T'; break;
        case 22:return 'U'; break;
        case 23:return 'V'; break;
        case 24:return 'W'; break;
        case 25:return 'Y'; break;
        case 26:return 'Z'; break;
    }
    return 0;
}

void input_number(int i){
    cout << "Player " << i << " turn!" << endl;
    do{
        cout << "Input the row number: ";
        cin >> row;
        if (row>boardsize || row<0) {
            cout << "Error: Input again!";
        }
    } while (row>boardsize || row<0);
    do{
        cout << "Input the col number: ";
        cin >> col;
        if (col>boardsize || col<0) {
            cout << "Error: Input again!";
        }
    } while (col>boardsize || col<0);
    if (board[row - 1][col - 1] != '_') {
        cout << "The cell is used!" << endl;
        input_number(i);
    }
}

bool check(int n){
    for (int i = 0; i<boardsize; i++) {
        for (int j = 0; j<boardsize; j++) {
            if (searchline(i, j, 0, 1, n)){ return true; }
            if (searchline(i, j, 1, 0, n)){ return true; }
            if (searchline(i, j, 1, 1, n)){ return true; }
            if (searchline(i, j, -1, 1, n)){ return true; }
        }
    }
    return false;
}

bool tie_game(int n){
    for (int i = 0; i<boardsize; i++) {
        for (int j = 0; j<boardsize; j++) {
            if (board[i][j] == '_') {
                return false;
            }
        }
    }
    return true;
}

bool searchline(const int x, const int y, const int xAdd, const int yAdd, int n){
    int m = 0;
    if (x + xAdd*(rowsize - 1) <0 || x + xAdd*(rowsize - 1) >= boardsize || y + yAdd*(rowsize - 1) <0 || y + yAdd*(rowsize - 1) >= boardsize) {
        return false;
    };
    for (int i = 0; i<rowsize; i++) {
        if (board[x + i*xAdd][y + i*yAdd] == char(symbol(n))) {
            m++;
        }
    };
    if (m == rowsize) {
        return true;
    };
    return false;
}

void saywinner(int n){
    cout << "Player " << n << " is winner!" << endl;
}

void tieGame(){
    cout << "The game is tie!" << endl;
}
bool square_check(int n){
    for (int i = 0; i<boardsize; i++) {
        for (int j = 0; j<boardsize; j++) {
			int num=0;
            for (int m = 0; m<rowsize - 1; m++) {
				square_searchline(i + m, j + m, 0, 1, n, m, num);
				square_searchline(i + m, j + m, 1, 0, n, m, num);
            }
			num = num - rowsize + 1;
			if (num == (rowsize - 1)*(rowsize - 1)){
				return true;
			}
        }
    }
    return false;
}

int square_searchline(const int x, const int y, const int xAdd, const int yAdd, int n, int a,int &num){
    if (x + xAdd*(rowsize - 2 - a) <0 || x + xAdd*(rowsize - 2 - a)>=boardsize || y + yAdd*(rowsize - 2 - a) <0 || y + yAdd*(rowsize - 2 - a)>=boardsize) {
        return false;
    };
    for (int i = 0; i<rowsize - a-1; i++) {
        if (board[x + i*xAdd][y + i*yAdd] == char(symbol(n))) {
            num++;
        }
    }; 
    return num;
}

void replay_game(){
	system("cls");
    int i;
    clock_t start;
    int pause=1000;
    ifstream replay("replay.txt");
    if (replay.fail()) {
        cout<<"Replay error."<<endl;
    }
    board_array();
    do{
        drawboard();
        replay>>row>>col>>i;
        board[row - 1][col - 1] = char(symbol(i));
        start = clock();
        while (clock() < start + pause) {
        }
    }while(!replay.eof());
}
